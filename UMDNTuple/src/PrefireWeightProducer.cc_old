#include "UMDNTuple/UMDNTuple/interface/PrefireWeightProducer.h"
#include "FWCore/Framework/interface/EDConsumerBase.h"
#include "FWCore/Framework/interface/Event.h"

PrefireWeightProducer::PrefireWeightProducer(  ) : 
    prefiringweight,
    prefiringweightup,
    prefiringweightdown,
{

}

void PrefireWeightProducer::initialize( const std::string &prefix,
                          const edm::EDGetTokenT< double >&prefTok,
                          const edm::EDGetTokenT< double >&prefupTok,
                          const edm::EDGetTokenT< double >&prefdownTok,
                          TTree *tree) {

    _prefix = prefix;
    _prefweight_token = prefTok;
    _prefweightup_token = prefupTok;
    _prefweightdown_token = prefdownTok;
    _minPt = minPt;


    tree->Branch( (prefix + "_prefweight" ).c_str(), &_prefweight_token, (prefix + "_prefweight/F" ).c_str() );
    tree->Branch( (prefix + "_prefupweight" ).c_str(), &_prefweightup_token, (prefix + "_prefupweight/F" ).c_str() );
    tree->Branch( (prefix + "_prefdownweight" ).c_str(), &_prefweightdown_token, (prefix + "_prefdownweight/F" ).c_str() );

}


void PrefireWeightProducer::produce(const edm::Event &iEvent ) {

    _prefiringweight = 0. ;
    _prefiringweightup = 0.;
    _prefiringweightdown =0.;


//    iEvent.getByToken(_prefweight_token,genParticles);

    edm::Handle< double > theprefweight;
    edm::Handle< double > theprefweightup;
    edm::Handle< double > theprefweightdown;
    iEvent.getByToken(_prefweight_token, theprefweight ) ;
    double _prefiringweight =(*theprefweight);
    
    iEvent.getByToken(_prefweightup_token, theprefweightup ) ;
    double _prefiringweightup =(*theprefweightup);
    
    iEvent.getByToken(_prefweightdown_token, theprefweightdown ) ;
    double _prefiringweightdown =(*theprefweightdown);

}



